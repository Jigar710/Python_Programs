numpy 
	short of numerical python, is one of the most important foundational packages for
	numerical computing in python.
Points
	ndarray, an efficient multidimensional array providing fast array-oriented arithmetic
	operations and flexible broadcasting capabilites.
		
	Mathematical functions for fast operations on entire arrays of data without having to
	write loops.
	
	Tools for reading/writing array data to disk and working with memory mapped files.
	
	Linear algebra, random number generation and Fourier Transform capabilities.
	
	A C API for connecting NumPy with libs writtern in C,C++ and FORTRAN.
	
===================================================================================================
Why Study NumPy?
	while NumPy by itself does not provide modeling or scientific functionalities,
	having an  understanding of Numpy array and array-oriented computing will help us
	to use tools with array-oriented semantics, like pandas much more effectively.
	
	NumPy internally stores data in a contiguous block of memory, independent of other
	build-in Python objects. NumPy's Library of algorithms wirtten in c lang can operate
	on this memory without any type checking or other overhead.
	
	NumPy array also use much less memory than build-in python seq.
	
	NumPy operations perform complex computations on entire arrays without the need of 
	Python for loops. 

===================================================================================================
Prog1.py : speed comparasion of numpy array and python seq(list) execution
NumPy based algo are generally 10 to 100 times faster than their pure python counterparts 
and use significantly less memory.
===================================================================================================
The NumPy ndarray : A multidimensional Array Object
	NumPy enables batch computationas with similar syntax to scalar values on built-in 
	Python Objects.
	N-dimensional array object, or ndarray
	An ndarray is a generic multidimensional container for homogeneous data .
	
	Every array has a shape, a tuple indicatig the size of each dimension and a dtype, 
	an object describing the data type of the array.
	
	prog2.py
===================================================================================================
Creating ndarray
	The easiest way to create an array is to use array function. This accepts any 
	seq-like object (including other arrays) and products a new NumPy array containing the 
	passed data.
	Nested sequences, like a list of equal length lists wil be converted into a multidimensional
	array
	np.array tries to infer a good data type for the array that it creates.
	
	prog3.py
===================================================================================================
Array creation Functions
		
	functions					description
	
	array		converting input data(list,tuple,array or other seq type) to an ndarray either
				by unferring a dtype or explicitly specifing dtype; copies the input data type
				by default
				
	asarray		convert input to ndarray, but do not copy if input is already array returns ref.
	
	arange		Like range(), byt returns ndarray
				default dtype is int32

    linspace    linspace(start,end,number of part)
                ex:
                >>>print(np.linspace(0,5,20))
                 op:   [0.         0.26315789 0.52631579 0.78947368 1.05263158 1.31578947
                       1.57894737 1.84210526 2.10526316 2.36842105 2.63157895 2.89473684
                       3.15789474 3.42105263 3.68421053 3.94736842 4.21052632 4.47368421
                       4.73684211 5.        ]
	
	ones		Produce an array with all 1s with given shape and dtype
	ones_like	takes another array and Produces a ones array of same shape and dtype.
	
	zeros
	zeros_like
	
	empty
	empty_like
	
	full		Produces an array of the given shape and dtype with all values set to the 
				indicated 'fill value'
	full_like

	eye,identity create a square N*N identity matrix (1s on the diagonal and 0s elsewhere).
=====================================================================================================
	prog4.py
	prog5.py
=====================================================================================================
Data Types for ndarrays : prog9.py
	can write float in the place of np.float64 
	NumPy aliases the Python types to its own equivalent data dtypes.
	
	we can also use another array's dtype attributes.
	
	There are shorthand type code strings(like u4) 
	we can also use to refer to a dtype.	
=====================================================================================================
Numpy Data types
	Numpy type		Type Code 		Description
	int8,uint8		i1,u1			Signed and unsined 8 bit (1 byte) int types.
	int16,uint16	i2,u2			Signed and unsined 16 bit (2 byte) int types.
	int32,uint32	i4,u4			Signed and unsined 32 bit (4 byte) int types.
	int64,uint64	i8,u8			Signed and unsined 64 bit (8 byte) int types.
	
	float16			f2				half percision floating point
	float32			f4 or f			Standard single precision floating point			
									compatiable with C float
	float64/float	f8 or d			Standard double precision floating point			
									compatiable with C double
									and python float object
	float128		f16 or g		Extended precision floating point			
					
	complex64		c8				Complex number represented by two 32,64 and 128 floats
									respectively.
	complex128		c16
	complex256		c32

	bool			?				Boolean Types, Stores True or False value
	
	object			O				Python object type a value can be any python object
	string_			S				Fixed length ASCII string type (1 byte per char
									ex: to create string type with length 10 : 'S10'
	unicode_		U				Fixed length Uniocde string type 
									(number of bytes platform specific)
									same semantics as in string : 'U10'
=====================================================================================================
Arithmetic with Numpy arrays : prog10.py

	Arrays are important bcoz they enable us to express batch operations on data
	without wirting any of loops.
	NumPy users call this "Vectorization".
	
	Any arithmetic operation between equal-size array applies the operation element-wise.
	
	Arithmetic operation with scalars propogate the scalar argument to each element 
	in the array.
=====================================================================================================
	prog11.py
	
	Comparisons between arrays of the same size yield boolean arrays 
	
	Operations between differently sized arrays called broadcasting.
=====================================================================================================
Basic indexing and slicing : prog6.py,prog7.py,prog8.py
	NumPy array indexing is a rich topic, as there are many ways you may
	want to sleect a subset of your data or indiviaul elements.
	
	As we can seem if we assign a scalar value to a slice, as in
	arr[5:8] = 12, the value is propagated (or broadcasted henceforth) to 
	entier selection.
	
	an important first distinction from python's built-in lists 
	is that slices are views on the original array.
	
	this means that the data is not copied, and any modifications to the view
	will be reflected in the source array.
========================================================================================================
	prog12.py,prog13.py
	
	if we want a copy of slicce of an ndarray instead of a view, we will need to explicitly
	copy the array : ex :arr[5:8].copy().
	
	in 2-D array, the elements at each index are  no longer 
	scalars but rather 1D arrays.
========================================================================================================
Basic indexing and slicing : prog15.py

In multidimensional arrays, if we omit later indices, the returned object will be
a lower dimensional ndarray consisiting of all the data along the higher 
dimensions.
Both scalar values and arrays can be assigned to arr4d[0].

Note that in all of these cases where subsections of the array have 
been selected, the returned arrays are views.
========================================================================================================
Indexing with Slices : prog14.py
	arr2d[:2] sliced along with axis 0, the first axis.
	A slice, therefore,selects a range of elements along a axis.
	
	we can pass multiple slices jist like we can passmultiple indexes.
========================================================================================================
Boolean indexing : prog16.py,prog17.py
========================================================================================================
Fancy indexing : prog18.py,prog19.py

	Fancy indexing is a term adapted by numpy to describe indexing using integer arrays.
	
	To select out a subset of the rows in a particular order, we can simply pass a 
	list of ndarray of integers specifiying the desired order.
	
	Using negative indices selects rows from the end.
	
	Passing multiple index arrays does something slightly diff; it selects a 1D array
	of elements corresponding to each tuple of indices.
	
	Facncy indexing unlike slicing always copies the data into a new array.
========================================================================================================
Transposing Arrays : prog20.py
	it is a spl form of reshaping, sort of a mirror copy along the diagonal.
	
	Matrix computations wil be very useful, for example 
	when computing inner matrix product using no.dot.
========================================================================================================
Transpose and swapping array axes : prog21.py	
	For higher dimensional arrays, transpose will accept a tuple of axis
	numbers to permute the axes.
	arr.transpose((1,0,2)): Here the axes have been reordered with the second axis first,
	the first axiss second and last axis unchanged.
	Simple transposing with arr.T is a spl case of swapping axes. ndarray has the method
	swapaxes, which takes a pair of axis numbers and swithces the indicated axes to 
	rearrange the data.
	swapaxes returns a view on the data without making a copy.
========================================================================================================
Universal function or ufunc 
	is a func that performs element-wise operations on data in ndarrays.
Many ufuncs are simple element-wise transformations, like sqrt or exp.
	these are referred to as unary ufuncs.
	modf returns the fractional and integeral parts of a floating-point array.
========================================================================================================
Sorting : prog31.py
	Like Pytho's built-in list type,NumPy arrays can be sorted in-place with the
	sort method.
	we can sort each one-dimensional array in-place along an axis by passing the 
	axis number to sort.
	A quick-and-dirty way to compute the quantiles of an array is to sort it and select
	the value at a particular rank.
========================================================================================================
Unique and Other Set Logic : prog32.py
	np.unique returns the sorted unique values in an array
	Contrast np.unique with the pure Python alternative
		sorted(set(names))
	np.in1d tests membership of the value in one array in another, returning 
	a boolean array.
Note : 	original data wil not change.
========================================================================================================
Methods : Array set operations

method				description

unique(x)			compute the sorted, unique elements in x
intersect1d(x,y)		compute the sorted, common elements in x and y
union1d(x,y)		compute the sorted union of elements
int1d(x,y)			compute a boolean array indicating whether each element of x 
					is contained in y.
					
setdiff1d(x,y)		set difference, elements in x that are not in y.
setxor1d(x,y)		set symmetric difference; elements that are in either of the 
					arrays, but noth both.
========================================================================================================
File IO with arrays : prog33.py
	NumPy is able to save and load data to and from disk either in text or
	binary format.
	
	np.save and np.load are the two workhorse functions for efficiently saving and
	loading array data on disk.
	Arrays are saved by default in an uncompressed raw binary format with the 
	extension .npy.
	
	in the file path does not already end in .npy, the extension will be appended.
	
	the array on disk can then be loaded with np.load().
	
	we save multiple arrays in an uncompressed archive using np.savez().
	
	when loading an .npz file, we get back a dict-like object that loads the
	individual arrays lazily.
	
	in your data compresses well, you may wish to use numpy.savez_compressed() instead.	
========================================================================================================
Linear Algebra : prog34.py
	Linear algebra, like matrix multiplication, decompositions,determinants, and 
	other square matrix math, is an important part of any array library.
	
	Unlike some languages like MATLAb, multiplying two two-dimensional arrays with
	* is an element-wise product instead of a matrix dot product.
	
	Thus, there is a function dot(), both an array method and a function in the 
	numpy namespace, for matrix multiplication.
	
	x.dot(y) is equivalent to np.dot(x,y).
	
	the @ symbol also works as an infix operater that perfoms matrix multidimensional.
	
	prog35.py
	numpy.linalg has a standard set of matrix decompositions and things like inverse
	and determinant.
	
	They use the popular linear algebra libraries internally like BLAS,LAPACK, or
	possibly (depending on your NumPy build) the proprietary Intel MKL
	(math kernel lib).
	
	qr computes the QR decompositions of matrix.
	
	methods / Functions
	
	Functions		Description
	diagonal		Return the diagonal (or off-diagonal) elements of a square matrix 
					as a 1D array, or convert a 1D array into a square matrix with
					zeros on the off-diagonal.
		
	dot				Matrix multiplication
	
	trace			Computer the sum of diagonal elements
	
	det				Compute the matrix determinant
	
	eig				Compute the eigenvalues and eigenvectors of a square matrix
	
	inv				Compute the inverse of a square matrix
	
	pinv			Computer the Moore-Penrose pseudo-inverse of a matrix
	
	qr 				Computer the QR decomposition
	
	svd				Computer the singular value decompositions(SVD)
	
	solve			solve the linear system Ax = b for x, where A is a square matrix.
	
	lstsq			Computer the least-squares solution to Ax = b
	
========================================================================================================
Reshaping Arrays : prog36.py
	To reshape, pass a tuple indicating the new shape to the reshape array instance
	method.
	
	one to the passed shape dimensions can be -1, in which case the value used for
	that dimension will be inferred from the data.
	
	returns the ndarray but cant change original ndarray shape
	
	prog37.py
	Since an array's shape attribute is a tuple, it can be passed to reshape, too.
	
	The opposite operation of reshape from one-dimensional to a higher dimesion is 
	typically known as flattening or raveling.
	
	ravel does not produce a copy of the underlying values if the values in the 
	result were contiguous in the original array. 
	The flatten method behaves like ravel except it always returns a copy of the 
	data.
	
	the data can be reshaped or raveled in different orders.
========================================================================================================
Concatenating and Spliting Arrays : prog38.py
	numpy.concatenate takes a sequence(tuple,list etc.) of arrays and joins them 
	together in order along the input axis.
	
	There aresome convenience functions, like vstack and hstack, for common kinds
	of concatenation.
	
	prog39.py
	split, on the other hand, slices apart an array into multiple arrays along
	an axis.
	
	the value[1,3] passed to np.split indicate the indices at which to split the 
	array pieces.
========================================================================================================
Broadcasting over axis with a 1D array : prog40.py
	rule :
		two arrays are compatible for broadcasting if for each trailing dimension
		(i.e. starting from the end) the axis match or if either of the lengths is 1.
		Broadcasting is then perfomed over the missing or length 1 dimension.
		
		Broadcasting describes how arithmetic works between arrays of different shapes.
		
		The simplest example of broadcasting occurs when combining a scalar value 
		with an array.
		Ex : A * 4
		
			Here we say that the scalar value 4 has been broadcast to all of the other 
			elements in the multiplication operation.
	
		we can demean each column of an array by subtracting the column means.

	prog41.py
	Consider the last example and suppose we wised instead to subtract the means
	value from each row.
	
	since arr.mean(0) has length 3, it is compatible for broadcasting across axis 
	0 because the trailing dimension in arr is 3 and therefore matches.
	
	Accroding to the rules, to subtract over axis 1(i.e., subtract the row mean
	from eac row), the smaller array must have shape(4,1).
	
	help : python for data analysis : Wes McKinney's book