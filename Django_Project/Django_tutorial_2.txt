Write your first view
	Let’s write the first view. 
	Open the file your_app_name/views.py and 
	put the following Python code in it:

	your_app_name/views.py
		from django.http import HttpResponse

		def index(request):
			return HttpResponse("Hello, world")
		
	This is the simplest view possible in Django. 
	To call the view, we need to map it to a URL - and for this 
	we need a URLconf.

	To create a URLconf in the your_app_name directory, 
	create a file called urls.py. 
	Your app directory should now look like:
	
	your_app_name
		__init__.py
		admin.py
		apps.py
		migrations/
			__init__.py
		models.py
		tests.py
		urls.py
		views.py
		
		
	In the your_app_name/urls.py file include the following code:

	your_app_name/urls.py
		from django.urls import path

		from . import views

		urlpatterns = [
			path('', views.index, name='index'),
		]
		
		
	The next step is to point the root URLconf at the 
	your_app_name.urls module. 
	In mysite/urls.py, add an import for django.urls.include 
	and insert an include() in the urlpatterns list, 
	so you have:

		mysite/urls.py
		from django.contrib import admin
		from django.urls import include, path

		urlpatterns = [
			path('your_app_name/', include('your_app_name.urls')),
			path('admin/', admin.site.urls),
		]
	
	The include() function allows referencing other URLconfs. 
	Whenever Django encounters include(), it chops off whatever part of the URL 
	matched up to that point and sends the remaining string to the included 
	URLconf for further processing.

	The idea behind include() is to make it easy to plug-and-play URLs. 
	Since your_app_name are in their own URLconf (your_app_name/urls.py), 
	they can be placed under “/your_app_name/”, or under “/fun_polls/”, or 
	under “/content/your_app_name/”, or any other path root, 
	and the app will still work.
===========================================================================================	
Go to http://localhost:8000/your_app_name/ in your browser, and you should see 
the text “Hello, world.”, which you defined in the index view.
===========================================================================================	
The path() function is passed four arguments, 
	two required: route and view, and 
	two optional: kwargs, and name. 
At this point, it’s worth reviewing what these arguments are for.

path() argument: route
	route is a string that contains a URL pattern. 
	When processing a request, Django starts at the first pattern in urlpatterns 
	and makes its way down the list, comparing the requested URL against each 
	pattern until it finds one that matches.

	Patterns don’t search GET and POST parameters, or the domain name. 
	For example, in a request to https://www.example.com/your_app_name/, 
	the URLconf will look for your_app_name/. 
	
	In a request to https://www.example.com/your_app_name/?page=3, the URLconf 
	will also look for your_app_name/.

path() argument: view
	When Django finds a matching pattern, it calls the specified view function 
	with an HttpRequest object as the first argument and any “captured” values 
	from the route as keyword arguments. 
	
path() argument: kwargs
	Arbitrary keyword arguments can be passed in a dictionary to the target view. 
	
path() argument: name
	Naming your URL lets you refer to it unambiguously from elsewhere in Django, 
	especially from within templates. 
	This powerful feature allows you to make global changes to the URL patterns 
	of your project while only touching a single file.